#!/usr/bin/python3

# source: https://gist.githubusercontent.com/davidhoness/0f45ef6a41bac6311614f109acbf92db/raw/970badd0ae4b097e3af8d5142e65c34b21f5cfab/usb_share.py

import time
import os
import logging

log_level = logging.INFO
if os.getenv('DEBUG', False):
  log_level = logging.DEBUG

logging.basicConfig(
  format='%(asctime)s %(levelname)-7s %(message)s',
  datefmt='%Y-%d-%m %H:%M:%S',
  level=log_level
)

from watchdog.observers import Observer
from watchdog.events import *

CMD_MOUNT = "modprobe g_mass_storage file={{ rpi_wifi_usb_share_file }} stall=0 ro=1 removable=1"
CMD_UNMOUNT = "modprobe -r g_mass_storage"
CMD_SYNC = "sync"

WATCH_PATH = "{{ rpi_wifi_usb_share_path }}"
ACT_EVENTS = [DirDeletedEvent, DirMovedEvent, FileDeletedEvent, FileModifiedEvent, FileMovedEvent]
ACT_TIME_OUT = 30


def os_cmd_mount():
    logging.info("Make {{ rpi_wifi_usb_share_file }} available to USB device (mount)" )
    os.system(CMD_MOUNT)


def os_cmd_unmount():
    logging.info("Make {{ rpi_wifi_usb_share_file }} unavailable to USB device (unmount)" )
    os.system(CMD_UNMOUNT)


def os_cmd_sync():
    logging.info("Writing filesystems (sync)" )
    os.system(CMD_SYNC)


class DirtyHandler(FileSystemEventHandler):
    def __init__(self):
        self.reset()

    def on_any_event(self, event):
        if type(event) in ACT_EVENTS:
            self._dirty = True
            self._dirty_time = time.time()

    @property
    def dirty(self):
        return self._dirty

    @property
    def dirty_time(self):
        return self._dirty_time

    def reset(self):
        self._dirty = False
        self._dirty_time = 0
        self._path = None


os_cmd_mount()

evh = DirtyHandler()
observer = Observer()
observer.schedule(evh, path=WATCH_PATH, recursive=True)
observer.start()

try:
    while True:
        while evh.dirty:
            time_out = time.time() - evh.dirty_time

            if time_out >= ACT_TIME_OUT:
                os_cmd_unmount()
                time.sleep(1)
                os_cmd_sync()
                time.sleep(1)
                os_cmd_mount()
                evh.reset()

            time.sleep(1)

        time.sleep(1)

except KeyboardInterrupt:
    observer.stop()

observer.join()
